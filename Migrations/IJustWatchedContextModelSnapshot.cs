// <auto-generated />
using System;
using IJustWatched.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IJustWatched.Migrations
{
    [DbContext(typeof(IJustWatchedContext))]
    partial class IJustWatchedContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("IJustWatched.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AuthorId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationDateTime");

                    b.Property<int?>("ReviewId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("IJustWatched.Models.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("FilmId");

                    b.Property<string>("FirstName");

                    b.Property<string>("SecondName");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("IJustWatched.Models.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("IJustWatched.Models.LikeReviewJoin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LikedByUserIdId");

                    b.Property<int?>("LikedReviewIdId");

                    b.HasKey("Id");

                    b.HasIndex("LikedByUserIdId");

                    b.HasIndex("LikedReviewIdId");

                    b.ToTable("LikesReviews");
                });

            modelBuilder.Entity("IJustWatched.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AuthorId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationDateTime");

                    b.Property<int?>("ReviewFilmId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ReviewFilmId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("IJustWatched.Models.SubscriptionJoin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CurrentUserIdId");

                    b.Property<int?>("SubscribedOnIdId");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserIdId");

                    b.HasIndex("SubscribedOnIdId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("IJustWatched.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TagText");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("IJustWatched.Models.TagReviewJoin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("PresentTagIdId");

                    b.Property<int?>("TaggedReviewIdId");

                    b.HasKey("Id");

                    b.HasIndex("PresentTagIdId");

                    b.HasIndex("TaggedReviewIdId");

                    b.ToTable("TagsReviews");
                });

            modelBuilder.Entity("IJustWatched.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthdayDate");

                    b.Property<string>("Email");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IJustWatched.Models.Comment", b =>
                {
                    b.HasOne("IJustWatched.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("IJustWatched.Models.Review")
                        .WithMany("Comments")
                        .HasForeignKey("ReviewId");
                });

            modelBuilder.Entity("IJustWatched.Models.Director", b =>
                {
                    b.HasOne("IJustWatched.Models.Film")
                        .WithMany("DirectorsId")
                        .HasForeignKey("FilmId");
                });

            modelBuilder.Entity("IJustWatched.Models.LikeReviewJoin", b =>
                {
                    b.HasOne("IJustWatched.Models.User", "LikedByUserId")
                        .WithMany()
                        .HasForeignKey("LikedByUserIdId");

                    b.HasOne("IJustWatched.Models.Review", "LikedReviewId")
                        .WithMany()
                        .HasForeignKey("LikedReviewIdId");
                });

            modelBuilder.Entity("IJustWatched.Models.Review", b =>
                {
                    b.HasOne("IJustWatched.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("IJustWatched.Models.Film", "ReviewFilm")
                        .WithMany()
                        .HasForeignKey("ReviewFilmId");
                });

            modelBuilder.Entity("IJustWatched.Models.SubscriptionJoin", b =>
                {
                    b.HasOne("IJustWatched.Models.User", "CurrentUserId")
                        .WithMany()
                        .HasForeignKey("CurrentUserIdId");

                    b.HasOne("IJustWatched.Models.User", "SubscribedOnId")
                        .WithMany()
                        .HasForeignKey("SubscribedOnIdId");
                });

            modelBuilder.Entity("IJustWatched.Models.TagReviewJoin", b =>
                {
                    b.HasOne("IJustWatched.Models.Tag", "PresentTagId")
                        .WithMany()
                        .HasForeignKey("PresentTagIdId");

                    b.HasOne("IJustWatched.Models.Review", "TaggedReviewId")
                        .WithMany()
                        .HasForeignKey("TaggedReviewIdId");
                });
#pragma warning restore 612, 618
        }
    }
}
